name: Deployment

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: Choose environment
        options:
          - workshop-dev

jobs:
  create_deployment:
    name: Create Deployment
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:

    - name: Create deployment
      id: create_deployment
      run: |
        DEPLOYMENT_ID=$(curl -X POST \
        -H "Authorization: token ${{ secrets.WORKFLOWS_GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/${{ github.repository }}/deployments \
        -d '{"ref": "${{ github.head_ref || github.ref_name }}", "environment": "${{ github.event.inputs.environment }}", "auto_merge": false, "required_contexts": []}' \
        | jq -r '.id')
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV

  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: create_deployment
    permissions:
      id-token: write
      contents: read
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_DEFAULT_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Set up Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: "latest"

    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: "22"

    - name: Install Python dependencies
      run: |
        poetry install --only main --no-root

    - name: Install AWS CDK
      run: |
        npm install -g aws-cdk@2.1007.0

    - name: Run CDK diff
      run: |
        poetry run cdk diff
      env:
        CDK_ACCOUNT: ${{ vars.AWS_DEFAULT_ACCOUNT }}
        CDK_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        CLOUD_ENVIRONMENT: ${{ github.event.inputs.environment }}

    - name: Run CDK deploy
      run: |
        poetry run cdk deploy --all --require-approval never
      env:
        CDK_ACCOUNT: ${{ vars.AWS_DEFAULT_ACCOUNT }}
        CDK_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        CLOUD_ENVIRONMENT: ${{ github.event.inputs.environment }}

  succeed_deployment:
    name: Succeed Deployment
    environment: ${{ github.event.inputs.environment }}
    needs:
      - deploy
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Set deployment status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.WORKFLOWS_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.deployment_id }}/statuses \
            -d '{"state": "success", "description": "Deployment to ${{ github.event.inputs.environment }} successful", "environment_url": "${{ vars.APP_LANDING_URL }}"}'

  failed_deployment:
    name: Failed Deployment
    environment: ${{ github.event.inputs.environment }}
    needs:
      - deploy
    runs-on: ubuntu-latest
    if: failure()
    steps:

    - name: Log failure
      run: |
        echo "::error Deployment failed for environment: ${{ github.event.inputs.environment }}"

    - name: Notify failure
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.WORKFLOWS_GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.deployment_id }}/statuses \
          -d '{"state": "failure", "description": "Deployment to ${{ github.event.inputs.environment }} failed"}'
